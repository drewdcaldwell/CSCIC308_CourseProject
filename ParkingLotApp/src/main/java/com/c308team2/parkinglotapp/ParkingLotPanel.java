/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.c308team2.parkinglotapp;

import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JList;


public class ParkingLotPanel extends javax.swing.JPanel {
    private ParkingLot currentLot;
    private User currResUser;
    /**
     * Creates new form ParkingLotPanel
     */
    public ParkingLotPanel() {
        if(currentLot == null) currentLot = new ParkingLot("Test Lot", "Test Address", 25, 100);
        initComponents();
    }
    
    public void updateLot(ParkingLot parkingLot){
        // method to update the panel with a given ParkingLot
        currentLot = parkingLot;
        updateInfo();
    }
    
    public void updateInfo(){
        // method to update the page
        
        // update labels
        lotNameLabel.setText(currentLot.getLotName());
        lotAddressLabel.setText(currentLot.getAddress());
        totalSpacesNumber.setText("" + currentLot.getTotalSpaces());
        emptySpacesNumber.setText("" + currentLot.getEmptySpaces());
        
        
        User currentUser = Session.getUser();
        System.out.println("Current user: " + currentUser.getFirstName());
        
        // update Reservation buttons
        if(currentLot.checkReservation(currentUser)){
            // currentUser has a reservation
            System.out.println("Reservation found");
            makeReservationButton.setEnabled(false);
            cancelReservationButton.setEnabled(true);
            reservationInfoLabel.setText("You already have a reservation.");
        } else if(currentLot.getEmptySpaces() == 0){
            // lot is full, do not allow new reservations
            makeReservationButton.setEnabled(false);
            cancelReservationButton.setEnabled(false);
            reservationInfoLabel.setText("Sorry, this lot is full.");
        } else {
            // currentUser does not have reservation and lot has empty spaces
            System.out.println("No Reservation found");
            makeReservationButton.setEnabled(true);
            cancelReservationButton.setEnabled(false);
            reservationInfoLabel.setText("Would you like to make a reservation?");
        }
        
        // check if currentUser is admin or higher
        if(currentUser.getUserType() >= 2) {
            // show admin buttons, can delete lot
            manageReservationsButton.setVisible(true);
            incrementButton.setVisible(true);
            decrementButton.setVisible(true);
            deleteButton.setVisible(true);
        } 
        // check if currentUser is staff of currentLot
        else if(currentLot.checkStaff(currentUser)){
            // show staff buttons, cannot delete lot
            manageReservationsButton.setVisible(true);
            incrementButton.setVisible(true);
            decrementButton.setVisible(true);
            deleteButton.setVisible(false);
        } else {
            // hide all staff buttons
            manageReservationsButton.setVisible(false);
            incrementButton.setVisible(false);
            decrementButton.setVisible(false);
            deleteButton.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reservationDialog = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        reservationList = new javax.swing.JList<>();
        confirmDialog = new javax.swing.JDialog();
        nameLabel = new javax.swing.JLabel();
        customNameLabel = new javax.swing.JLabel();
        plateLabel = new javax.swing.JLabel();
        customPlateLabel = new javax.swing.JLabel();
        confirmButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        deleteDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        deleteBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        lotNameLabel = new javax.swing.JLabel();
        lotAddressLabel = new javax.swing.JLabel();
        totalSpacesLabel = new javax.swing.JLabel();
        totalSpacesNumber = new javax.swing.JLabel();
        emptySpacesLabel = new javax.swing.JLabel();
        emptySpacesNumber = new javax.swing.JLabel();
        reservationsLabel = new javax.swing.JLabel();
        makeReservationButton = new javax.swing.JButton();
        cancelReservationButton = new javax.swing.JButton();
        backButtonLabel = new javax.swing.JLabel();
        reservationInfoLabel = new javax.swing.JLabel();
        incrementButton = new javax.swing.JButton();
        decrementButton = new javax.swing.JButton();
        manageReservationsButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        reservationDialog.setTitle("Reservation List");
        reservationDialog.setAlwaysOnTop(true);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(720, 150));

        reservationList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                reservationListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(reservationList);

        javax.swing.GroupLayout reservationDialogLayout = new javax.swing.GroupLayout(reservationDialog.getContentPane());
        reservationDialog.getContentPane().setLayout(reservationDialogLayout);
        reservationDialogLayout.setHorizontalGroup(
            reservationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
        );
        reservationDialogLayout.setVerticalGroup(
            reservationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reservationDialogLayout.createSequentialGroup()
                .addGap(0, 21, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        confirmDialog.setTitle("Reservation Details");
        confirmDialog.setAlwaysOnTop(true);

        nameLabel.setText("Name:");

        customNameLabel.setText("First Last");

        plateLabel.setText("Plate Number:");

        customPlateLabel.setText("123ABC");

        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout confirmDialogLayout = new javax.swing.GroupLayout(confirmDialog.getContentPane());
        confirmDialog.getContentPane().setLayout(confirmDialogLayout);
        confirmDialogLayout.setHorizontalGroup(
            confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(confirmDialogLayout.createSequentialGroup()
                        .addGroup(confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(plateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(customPlateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(confirmDialogLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(confirmButton)
                .addGap(18, 18, 18)
                .addComponent(cancelButton)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        confirmDialogLayout.setVerticalGroup(
            confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmDialogLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customNameLabel)
                .addGap(24, 24, 24)
                .addComponent(plateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customPlateLabel)
                .addGap(18, 18, 18)
                .addGroup(confirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmButton)
                    .addComponent(cancelButton))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        deleteDialog.setTitle("Warning");

        jLabel1.setText("Are you sure you want to delete this lot?");

        jLabel2.setText("This cannot be undone.");

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deleteDialogLayout = new javax.swing.GroupLayout(deleteDialog.getContentPane());
        deleteDialog.getContentPane().setLayout(deleteDialogLayout);
        deleteDialogLayout.setHorizontalGroup(
            deleteDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteDialogLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(deleteDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(deleteDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(deleteDialogLayout.createSequentialGroup()
                            .addComponent(deleteBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancelBtn))
                        .addComponent(jLabel1)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        deleteDialogLayout.setVerticalGroup(
            deleteDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(deleteDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteBtn)
                    .addComponent(cancelBtn))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        setPreferredSize(new java.awt.Dimension(1080, 720));

        lotNameLabel.setFont(new java.awt.Font("Malgun Gothic", 0, 48)); // NOI18N
        lotNameLabel.setText("Parking Lot Name");

        lotAddressLabel.setFont(new java.awt.Font("Malgun Gothic", 0, 24)); // NOI18N
        lotAddressLabel.setText("12345 Lot Address, City");

        totalSpacesLabel.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        totalSpacesLabel.setText("Total Spaces:");

        totalSpacesNumber.setFont(new java.awt.Font("Malgun Gothic", 0, 36)); // NOI18N
        totalSpacesNumber.setText("100");

        emptySpacesLabel.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        emptySpacesLabel.setText("Empty Spaces:");

        emptySpacesNumber.setFont(new java.awt.Font("Malgun Gothic", 0, 36)); // NOI18N
        emptySpacesNumber.setText("25");

        reservationsLabel.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        reservationsLabel.setText("Reservations:");

        makeReservationButton.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        makeReservationButton.setText("Reserve a Spot");
        makeReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeReservationButtonActionPerformed(evt);
            }
        });

        cancelReservationButton.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        cancelReservationButton.setText("Cancel Reservation");
        cancelReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelReservationButtonActionPerformed(evt);
            }
        });

        backButtonLabel.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        backButtonLabel.setForeground(new java.awt.Color(0, 102, 255));
        backButtonLabel.setText("< Back");
        backButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backButtonLabelMouseClicked(evt);
            }
        });

        reservationInfoLabel.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        reservationInfoLabel.setText("Make a reservation.");

        incrementButton.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        incrementButton.setText("Increment Empty Spaces (Car Leaving)");
        incrementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incrementButtonActionPerformed(evt);
            }
        });

        decrementButton.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        decrementButton.setText("Decrement Empty Spaces (Car Entering)");
        decrementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decrementButtonActionPerformed(evt);
            }
        });

        manageReservationsButton.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        manageReservationsButton.setText("Manage Reservations");
        manageReservationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageReservationsButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Malgun Gothic", 0, 12)); // NOI18N
        deleteButton.setText("Delete This Lot");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lotNameLabel)
                            .addComponent(lotAddressLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 266, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emptySpacesNumber)
                            .addComponent(totalSpacesLabel)
                            .addComponent(totalSpacesNumber)
                            .addComponent(emptySpacesLabel))
                        .addGap(214, 214, 214))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backButtonLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(makeReservationButton)
                                .addGap(62, 62, 62)
                                .addComponent(cancelReservationButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(manageReservationsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(decrementButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(incrementButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(101, 101, 101))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reservationsLabel)
                            .addComponent(reservationInfoLabel))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButtonLabel)
                    .addComponent(deleteButton))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lotNameLabel)
                    .addComponent(totalSpacesLabel))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(lotAddressLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(totalSpacesNumber)
                        .addGap(55, 55, 55)
                        .addComponent(emptySpacesLabel)))
                .addGap(18, 18, 18)
                .addComponent(emptySpacesNumber)
                .addGap(18, 18, 18)
                .addComponent(reservationsLabel)
                .addGap(27, 27, 27)
                .addComponent(reservationInfoLabel)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(makeReservationButton)
                    .addComponent(cancelReservationButton)
                    .addComponent(incrementButton))
                .addGap(18, 18, 18)
                .addComponent(decrementButton)
                .addGap(18, 18, 18)
                .addComponent(manageReservationsButton)
                .addContainerGap(105, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonLabelMouseClicked
        // method called when back button is pressed
        
        // display the parkingListCard
        CardLayout card = (CardLayout) getParent().getLayout();
        card.show(getParent(), "listCard"); 
    }//GEN-LAST:event_backButtonLabelMouseClicked

    private void makeReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeReservationButtonActionPerformed
        // method called when Make Reservation button is pressed
        
        // add reservation for currentUser and update page
        User currentUser = Session.getUser();
        currentLot.addReservation(currentUser);
        updateInfo();
    }//GEN-LAST:event_makeReservationButtonActionPerformed

    private void cancelReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelReservationButtonActionPerformed
        // method called when Cancel Reservation button is pressed
        
        // cancel reservation for currentUser and update page
        User currentUser = Session.getUser();
        currentLot.cancelReservation(currentUser);
        updateInfo();
    }//GEN-LAST:event_cancelReservationButtonActionPerformed

    private void incrementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incrementButtonActionPerformed
        // method called when increment spaces button is pressed
        
        // increment spaces and update page
        currentLot.incrementSpaces();
        updateInfo();
    }//GEN-LAST:event_incrementButtonActionPerformed

    private void decrementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decrementButtonActionPerformed
        // method called when decrement spaces button is pressed
        
        // decrement spaces and update page
        currentLot.decrementSpaces();
        updateInfo();
    }//GEN-LAST:event_decrementButtonActionPerformed

    private void manageReservationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageReservationsButtonActionPerformed
        // method called when Manage Reservations button is pressed
        
        // get reservations of currentLot
        Map<String, User> reservations = currentLot.getReservations();
        
        // create a ListModel of all reservations to be used with JList
        DefaultListModel<User> listModel = new DefaultListModel<>();
        for (User value : reservations.values()) {
            listModel.addElement(value);
        }
        
        // set the JList model
        reservationList.setModel(listModel);
        
        // prepare and display reservationDialog
        reservationDialog.setSize(250, 200);
        reservationDialog.setLocationRelativeTo(null); // center
        // make sure confirmDialog is not visible when opened
        confirmDialog.setVisible(false);
        reservationDialog.setVisible(true);
    }//GEN-LAST:event_manageReservationsButtonActionPerformed

    private void reservationListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_reservationListValueChanged
        // method called when a reservation is selected from the reservationDialog
        
        // get the User of selected reservation
        User currentReservedUser = reservationList.getSelectedValue();
        
        // update the confirmDialog with the selected user
        if(currentReservedUser != null) {
            updateConfirmDialog(currentReservedUser);
        }
        
        // prepare and display the confirmDialog
        confirmDialog.setSize(225, 220);
        confirmDialog.setLocationRelativeTo(null); // center
        confirmDialog.setVisible(true);
        
        // clear selection
        reservationList.clearSelection();
    }//GEN-LAST:event_reservationListValueChanged

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        // method called when the Confirm button is pressed on confirmDialog
        
        // confirm the selected reservation
        currentLot.confirmReservation(currResUser);
        
        // close the dialogs
        confirmDialog.dispose();
        reservationDialog.dispose();
        
        // update page
        updateInfo();
        reservationInfoLabel.setText("Confirmed reservation for " + currResUser.toString());
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // method called when Cancel button is pressed in confirmDialog
        
        // cancel the selected reservation
        currentLot.cancelReservation(currResUser);
        
        // close the dialogs
        confirmDialog.dispose();
        reservationDialog.dispose();
        
        // update page
        updateInfo();
        reservationInfoLabel.setText("Cancelled reservation for " + currResUser.toString());
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // method called when Delete Lot button is pressed
        
        // prepare and display deleteDialog to confirm deletion
        deleteDialog.setSize(290, 150);
        deleteDialog.setLocationRelativeTo(null);
        deleteDialog.setVisible(true);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // method called when Cancel button is pressed in deleteDialog
        
        // close the deleteDialog
        deleteDialog.dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // method called when Delete button is pressed in deleteDialog
        // confirms and fully deletes lot from DB
        
        // remove the currentLot from DB
        boolean removed = Database.lotDB.removeLot(currentLot);
        if(removed) System.out.println("Succesfully deleted" + currentLot.getLotName());
        
        // close the deleteDialog
        deleteDialog.dispose();
        
        // go back to parkingListCard
        CardLayout card = (CardLayout) getParent().getLayout();
        card.show(getParent(), "listCard");
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void updateConfirmDialog(User user){
        // method called to update the confirmDialog with given User
        
        // update selected user
        currResUser = user;
        // update labels
        customNameLabel.setText(user.toString());
        customPlateLabel.setText(user.getPlateNumber());
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backButtonLabel;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton cancelReservationButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JDialog confirmDialog;
    private javax.swing.JLabel customNameLabel;
    private javax.swing.JLabel customPlateLabel;
    private javax.swing.JButton decrementButton;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton deleteButton;
    private javax.swing.JDialog deleteDialog;
    private javax.swing.JLabel emptySpacesLabel;
    private javax.swing.JLabel emptySpacesNumber;
    private javax.swing.JButton incrementButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lotAddressLabel;
    private javax.swing.JLabel lotNameLabel;
    private javax.swing.JButton makeReservationButton;
    private javax.swing.JButton manageReservationsButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel plateLabel;
    private javax.swing.JDialog reservationDialog;
    private javax.swing.JLabel reservationInfoLabel;
    private javax.swing.JList<User> reservationList;
    private javax.swing.JLabel reservationsLabel;
    private javax.swing.JLabel totalSpacesLabel;
    private javax.swing.JLabel totalSpacesNumber;
    // End of variables declaration//GEN-END:variables
}
